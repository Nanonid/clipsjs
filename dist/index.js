"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EMCModule = require("./clips");
class CLIPSIF {
    constructor() {
        this.CreateEnvironment = exports.EMCModule.cwrap('CreateEnvironment', 'number', []);
        this.malloc = exports.EMCModule.cwrap('malloc', 'number', ['number']);
        this.free = exports.EMCModule.cwrap('free', 'void', ['number']);
        this.EnvEval = exports.EMCModule.cwrap('EnvEval', 'number', ['number', 'string', 'number']);
        this.EnvClear = exports.EMCModule.cwrap('EnvClear', 'number', ['number']);
        this.EnvGetFactList = exports.EMCModule.cwrap('EnvGetFactList', 'void', ['number', 'number', 'number']);
        this.GetDataType = exports.EMCModule.cwrap('GetDataType', 'number', ['number']);
        this.GetDataString = exports.EMCModule.cwrap('GetDataString', 'string', ['number']);
        this.GetDataNumber = exports.EMCModule.cwrap('GetDataString', 'number', ['number']);
        this.SetEvaluationError = exports.EMCModule.cwrap('SetEvaluationError', 'number', ['number', 'number']);
        this.SetHaltExecution = exports.EMCModule.cwrap('SetHaltExecution', 'number', ['number', 'number']);
        console.log("assign print");
        exports.EMCModule.print = CLIPSIF.print;
    }
    static print(msg) {
        console.log("print", msg);
        CLIPSIF.buffer.push(msg);
    }
    static clearBuffer() {
        CLIPSIF.buffer = [];
    }
}
CLIPSIF.buffer = [];
exports.CLIPSIF = CLIPSIF;
exports.CLIPS = new CLIPSIF();
exports.EMCModule.print("module print");
var DataTypes;
(function (DataTypes) {
    DataTypes[DataTypes["FLOAT"] = 0] = "FLOAT";
    DataTypes[DataTypes["INTEGER"] = 1] = "INTEGER";
    DataTypes[DataTypes["SYMBOL"] = 2] = "SYMBOL";
    DataTypes[DataTypes["STRING"] = 3] = "STRING";
    DataTypes[DataTypes["MULTIFIELD"] = 4] = "MULTIFIELD";
    DataTypes[DataTypes["EXTERNAL_ADDRESS"] = 5] = "EXTERNAL_ADDRESS";
    DataTypes[DataTypes["FACT_ADDRESS"] = 6] = "FACT_ADDRESS";
    DataTypes[DataTypes["INSTANCE_ADDRESS"] = 7] = "INSTANCE_ADDRESS";
    DataTypes[DataTypes["INSTANCE_NAME"] = 8] = "INSTANCE_NAME";
    DataTypes[DataTypes["UNK"] = 9] = "UNK";
})(DataTypes = exports.DataTypes || (exports.DataTypes = {}));
class DataObject {
    constructor(buffer_size = DataObject.DEFAULT_BUFFER_SIZE) {
        this.buffer_size = buffer_size;
        this.ds = exports.CLIPS.malloc(this.buffer_size);
    }
    free() {
        exports.CLIPS.free(this.ds);
    }
    type() {
        return exports.CLIPS.GetDataType(this.ds);
    }
    dataType() {
        let dt = this.type();
        if (dt > DataTypes.INSTANCE_NAME) {
            return DataTypes.UNK;
        }
        return dt;
    }
    toNumber() {
        return exports.CLIPS.GetDataNumber(this.ds);
    }
    toString() {
        return exports.CLIPS.GetDataString(this.ds);
    }
}
DataObject.DEFAULT_BUFFER_SIZE = 1024;
exports.DataObject = DataObject;
class CLIPSEnv {
    constructor() {
        this.env = exports.CLIPS.CreateEnvironment();
        this.data = new DataObject();
    }
    recover() {
        exports.CLIPS.SetEvaluationError(this.env, 0);
        exports.CLIPS.SetHaltExecution(this.env, 0);
    }
    clear() {
        exports.CLIPS.EnvClear(this.env);
    }
    eval(clips) {
        let res = exports.CLIPS.EnvEval(this.env, clips, this.data.ds);
        console.log("buffer:", CLIPSIF.buffer);
        console.log("res:", res, clips, " ds:", this.data.ds, " ds type:", this.data.type(), DataTypes[this.data.dataType()]);
        if (this.data.dataType() == DataTypes.INTEGER || this.data.dataType() == DataTypes.FLOAT) {
            console.log("number:", exports.CLIPS.GetDataNumber(this.data.ds));
        }
        return this.data;
    }
    fact_list() {
        exports.CLIPS.EnvGetFactList(this.env, this.data.ds, 0);
        return this.data;
    }
}
exports.CLIPSEnv = CLIPSEnv;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2VyaWNsaW5kYWhsL3NyYy9TY2l1bW8vY2xpcHNqcy9saWIvIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHVDQUE0QztBQWM1QztJQW9CSTtRQW5CQSxzQkFBaUIsR0FBdUIsaUJBQVMsQ0FBQyxLQUFLLENBQUMsbUJBQW1CLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzNGLFdBQU0sR0FBWSxpQkFBUyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNsRSxTQUFJLEdBQVUsaUJBQVMsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDMUQsWUFBTyxHQUFhLGlCQUFTLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDekYsYUFBUSxHQUFjLGlCQUFTLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ3hFLG1CQUFjLEdBQW9CLGlCQUFTLENBQUMsS0FBSyxDQUFDLGdCQUFnQixFQUFFLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUM1RyxnQkFBVyxHQUFpQixpQkFBUyxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNqRixrQkFBYSxHQUFtQixpQkFBUyxDQUFDLEtBQUssQ0FBQyxlQUFlLEVBQUUsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUN2RixrQkFBYSxHQUFtQixpQkFBUyxDQUFDLEtBQUssQ0FBQyxl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